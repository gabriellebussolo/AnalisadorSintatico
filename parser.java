
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\010\000\002\002\004\000\002\003" +
    "\005\000\002\005\006\000\002\005\004\000\002\006\003" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\004\012\000\002\010\005\000\002" +
    "\010\004\000\002\011\005\000\002\011\007\000\002\011" +
    "\011\000\002\011\004\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\015\003\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\012\003\000\002\012\005\000\002\012\005\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\031\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\013\010\001\002\000\006\005\011\006\013\001" +
    "\002\000\004\013\ufffc\001\002\000\010\005\020\006\023" +
    "\007\021\001\002\000\004\013\ufffb\001\002\000\004\013" +
    "\015\001\002\000\004\033\016\001\002\000\010\005\uffff" +
    "\006\uffff\007\uffff\001\002\000\004\032\076\001\002\000" +
    "\004\013\ufffa\001\002\000\004\013\ufff8\001\002\000\004" +
    "\013\024\001\002\000\004\013\ufff9\001\002\000\004\027" +
    "\025\001\002\000\006\005\011\006\013\001\002\000\004" +
    "\030\033\001\002\000\004\013\030\001\002\000\006\030" +
    "\ufffd\034\031\001\002\000\006\005\011\006\013\001\002" +
    "\000\004\030\ufffe\001\002\000\004\031\034\001\002\000" +
    "\010\010\041\013\035\015\036\001\002\000\004\026\074" +
    "\001\002\000\012\012\045\013\043\014\044\027\046\001" +
    "\002\000\004\032\072\001\002\000\004\033\070\001\002" +
    "\000\004\027\042\001\002\000\012\012\045\013\043\014" +
    "\044\027\046\001\002\000\020\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\030\uffe3\033\uffe3\001\002\000\020\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\030\uffe5\033\uffe5" +
    "\001\002\000\020\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\030\uffe4\033\uffe4\001\002\000\012\012\045\013\043" +
    "\014\044\027\046\001\002\000\016\016\053\017\052\020" +
    "\057\021\055\022\060\030\051\001\002\000\020\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\030\uffe8\033\uffe8\001" +
    "\002\000\010\010\041\013\035\015\036\001\002\000\012" +
    "\012\uffef\013\uffef\014\uffef\027\uffef\001\002\000\012\012" +
    "\ufff0\013\ufff0\014\ufff0\027\ufff0\001\002\000\012\012\045" +
    "\013\043\014\044\027\046\001\002\000\012\012\uffed\013" +
    "\uffed\014\uffed\027\uffed\001\002\000\012\012\045\013\043" +
    "\014\044\027\046\001\002\000\012\012\uffee\013\uffee\014" +
    "\uffee\027\uffee\001\002\000\012\012\uffec\013\uffec\014\uffec" +
    "\027\uffec\001\002\000\020\016\053\017\052\020\057\021" +
    "\055\022\060\030\uffe6\033\uffe6\001\002\000\020\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\030\uffe7\033\uffe7\001" +
    "\002\000\006\011\064\033\ufff3\001\002\000\010\010\041" +
    "\013\035\015\036\001\002\000\004\033\ufff2\001\002\000" +
    "\016\016\053\017\052\020\057\021\055\022\060\030\067" +
    "\001\002\000\020\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\030\uffe2\033\uffe2\001\002\000\016\010\041\011\ufff5" +
    "\013\035\015\036\032\ufff5\033\ufff5\001\002\000\010\011" +
    "\ufff6\032\ufff6\033\ufff6\001\002\000\004\032\ufff7\001\002" +
    "\000\016\016\053\017\052\020\057\021\055\022\060\033" +
    "\ufff1\001\002\000\012\012\045\013\043\014\044\027\046" +
    "\001\002\000\016\016\053\017\052\020\057\021\055\022" +
    "\060\033\ufff4\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\006\013\001\001\000\002\001\001\000\006\004" +
    "\016\007\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\025\006\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\031\006\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\036\011\037\001\001\000\002" +
    "\001\001\000\006\012\072\013\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\046" +
    "\013\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\065\013\047\001\001\000\006" +
    "\014\055\015\053\001\001\000\002\001\001\000\006\010" +
    "\062\011\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\061\001\001\000\002\001\001\000\006\012" +
    "\060\013\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\055\015\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\064\011\037\001\001\000\002" +
    "\001\001\000\006\014\055\015\053\001\001\000\002\001" +
    "\001\000\006\010\070\011\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\055\015\053\001\001\000" +
    "\006\012\074\013\047\001\001\000\006\014\055\015\053" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // declaracaoClasse ::= CHAVEESQ CLASSE ID declaracaoAtributo declaracaoMetodo CHAVEDIR 
            { parser.Tree.reduce(6,"declaracaoClasse",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoClasse",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= declaracaoClasse EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaracaoAtributo ::= tipoAtributo ID PONTOEVIRGULA 
            { parser.Tree.reduce(3,"declaracaoAtributo",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoAtributo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // argumentos ::= tipoAtributo ID VIRGULA argumentos 
            { parser.Tree.reduce(4,"argumentos",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // argumentos ::= tipoAtributo ID 
            { parser.Tree.reduce(2,"argumentos",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipoAtributo ::= BOOL 
            { parser.Tree.reduce(1,"tipoAtributo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoAtributo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipoAtributo ::= INT 
            { parser.Tree.reduce(1,"tipoAtributo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoAtributo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipoMetodo ::= BOOL 
            { parser.Tree.reduce(1,"tipoMetodo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoMetodo ::= INT 
            { parser.Tree.reduce(1,"tipoMetodo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoMetodo ::= VOID 
            { parser.Tree.reduce(1,"tipoMetodo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracaoMetodo ::= tipoMetodo ID PARESQ argumentos PARDIR CHAVEESQ comandos CHAVEDIR 
            { parser.Tree.reduce(8,"declaracaoMetodo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoMetodo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comandos ::= comando PONTOEVIRGULA comandos 
            { parser.Tree.reduce(3,"comandos",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comandos ::= comando PONTOEVIRGULA 
            { parser.Tree.reduce(2,"comandos",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comando ::= ID IGUAL expressao 
            { parser.Tree.reduce(3,"comando",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comando ::= IF PARESQ expressao PARDIR comandos 
            { parser.Tree.reduce(5,"comando",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comando ::= IF PARESQ expressao PARDIR comandos ELSE comandos 
            { parser.Tree.reduce(7,"comando",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comando ::= RETORNO expressao 
            { parser.Tree.reduce(2,"comando",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operadorLogico ::= NOT 
            { parser.Tree.reduce(1,"operadorLogico",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operadorLogico ::= AND 
            { parser.Tree.reduce(1,"operadorLogico",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operadorLogico ::= OR 
            { parser.Tree.reduce(1,"operadorLogico",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operadorAritmetico ::= SOMA 
            { parser.Tree.reduce(1,"operadorAritmetico",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operadorAritmetico ::= MULTIPLICACAO 
            { parser.Tree.reduce(1,"operadorAritmetico",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operadorRelacional ::= OPIGUAL 
            { parser.Tree.reduce(1,"operadorRelacional",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operadorRelacional ::= OPMAIOR 
            { parser.Tree.reduce(1,"operadorRelacional",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadorRelacional ::= OPMENOR 
            { parser.Tree.reduce(1,"operadorRelacional",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressao ::= termo 
            { parser.Tree.reduce(1,"expressao",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressao ::= expressao operadorAritmetico termo 
            { parser.Tree.reduce(3,"expressao",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expressao ::= expressao operadorLogico expressao 
            { parser.Tree.reduce(3,"expressao",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // termo ::= NUMERO 
            { parser.Tree.reduce(1,"termo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // termo ::= CONSTANTE 
            { parser.Tree.reduce(1,"termo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // termo ::= ID 
            { parser.Tree.reduce(1,"termo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // termo ::= PARESQ expressao PARDIR 
            { parser.Tree.reduce(3,"termo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
