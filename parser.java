
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\010\000\002\002\004\000\002\005" +
    "\004\000\002\005\003\000\002\003\005\000\002\006\006" +
    "\000\002\006\004\000\002\007\003\000\002\007\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\004\012\000\002\011\005\000\002\011\004\000\002\012" +
    "\005\000\002\012\007\000\002\012\011\000\002\012\004" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\013\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\031\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\013\010\001\002\000\006\005\012\006\015\001" +
    "\002\000\010\005\022\006\025\007\023\001\002\000\004" +
    "\013\ufffa\001\002\000\010\005\012\006\015\007\ufffe\001" +
    "\002\000\004\013\016\001\002\000\004\013\ufff9\001\002" +
    "\000\004\033\017\001\002\000\010\005\ufffd\006\ufffd\007" +
    "\ufffd\001\002\000\010\005\uffff\006\uffff\007\uffff\001\002" +
    "\000\004\032\105\001\002\000\004\013\ufff8\001\002\000" +
    "\004\013\ufff6\001\002\000\004\013\026\001\002\000\004" +
    "\013\ufff7\001\002\000\004\027\027\001\002\000\006\005" +
    "\012\006\015\001\002\000\004\030\035\001\002\000\004" +
    "\013\032\001\002\000\006\030\ufffb\034\033\001\002\000" +
    "\006\005\012\006\015\001\002\000\004\030\ufffc\001\002" +
    "\000\004\031\036\001\002\000\010\010\043\013\037\015" +
    "\040\001\002\000\004\026\103\001\002\000\012\012\047" +
    "\013\045\014\046\027\050\001\002\000\004\033\100\001" +
    "\002\000\004\032\077\001\002\000\004\027\044\001\002" +
    "\000\012\012\047\013\045\014\046\027\050\001\002\000" +
    "\026\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\030\uffe0\033\uffe0\001\002\000\026\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\030\uffe2\033\uffe2\001\002\000\026\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\030\uffe1\033\uffe1\001\002\000\012\012\047\013\045\014" +
    "\046\027\050\001\002\000\024\016\062\017\053\020\065" +
    "\021\064\022\060\023\066\024\056\025\057\030\055\001" +
    "\002\000\026\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\030\uffe6\033\uffe6\001\002\000" +
    "\012\012\uffed\013\uffed\014\uffed\027\uffed\001\002\000\012" +
    "\012\047\013\045\014\046\027\050\001\002\000\010\010" +
    "\043\013\037\015\040\001\002\000\012\012\uffe8\013\uffe8" +
    "\014\uffe8\027\uffe8\001\002\000\012\012\uffe7\013\uffe7\014" +
    "\uffe7\027\uffe7\001\002\000\012\012\uffea\013\uffea\014\uffea" +
    "\027\uffea\001\002\000\012\012\047\013\045\014\046\027" +
    "\050\001\002\000\012\012\uffee\013\uffee\014\uffee\027\uffee" +
    "\001\002\000\012\012\047\013\045\014\046\027\050\001" +
    "\002\000\012\012\uffeb\013\uffeb\014\uffeb\027\uffeb\001\002" +
    "\000\012\012\uffec\013\uffec\014\uffec\027\uffec\001\002\000" +
    "\012\012\uffe9\013\uffe9\014\uffe9\027\uffe9\001\002\000\026" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\030\uffe5\033\uffe5\001\002\000\026\016\062" +
    "\017\053\020\065\021\064\022\060\023\066\024\056\025" +
    "\057\030\uffe3\033\uffe3\001\002\000\006\011\072\033\ufff1" +
    "\001\002\000\010\010\043\013\037\015\040\001\002\000" +
    "\004\033\ufff0\001\002\000\026\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\030\uffe4\033" +
    "\uffe4\001\002\000\024\016\062\017\053\020\065\021\064" +
    "\022\060\023\066\024\056\025\057\030\076\001\002\000" +
    "\026\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\030\uffdf\033\uffdf\001\002\000\004\032" +
    "\ufff5\001\002\000\016\010\043\011\ufff3\013\037\015\040" +
    "\032\ufff3\033\ufff3\001\002\000\010\011\ufff4\032\ufff4\033" +
    "\ufff4\001\002\000\024\016\062\017\053\020\065\021\064" +
    "\022\060\023\066\024\056\025\057\033\uffef\001\002\000" +
    "\012\012\047\013\045\014\046\027\050\001\002\000\024" +
    "\016\062\017\053\020\065\021\064\022\060\023\066\024" +
    "\056\025\057\033\ufff2\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\012\005\010\007\013\001\001\000\006\004\020\010" +
    "\023\001\001\000\002\001\001\000\010\003\012\005\017" +
    "\007\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\027" +
    "\007\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\033\007\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\041\012\040\001" +
    "\001\000\002\001\001\000\006\013\101\014\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\050\014\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\074\014\051\001" +
    "\001\000\010\015\060\016\062\017\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\073\001\001\000" +
    "\006\011\070\012\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\067\014\051\001" +
    "\001\000\002\001\001\000\004\014\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\060\016\062\017\053\001\001\000\002" +
    "\001\001\000\006\011\072\012\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\060\016\062\017\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\100\012\040\001\001\000\002\001\001\000\010\015\060" +
    "\016\062\017\053\001\001\000\006\013\103\014\051\001" +
    "\001\000\010\015\060\016\062\017\053\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // declaracaoClasse ::= CHAVEESQ CLASSE ID atributos declaracaoMetodo CHAVEDIR 
            { parser.Tree.reduce(6,"declaracaoClasse",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoClasse",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= declaracaoClasse EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // atributos ::= declaracaoAtributo atributos 
            { parser.Tree.reduce(2,"atributos",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // atributos ::= declaracaoAtributo 
            { parser.Tree.reduce(1,"atributos",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracaoAtributo ::= tipoAtributo ID PONTOEVIRGULA 
            { parser.Tree.reduce(3,"declaracaoAtributo",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoAtributo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // argumentos ::= tipoAtributo ID VIRGULA argumentos 
            { parser.Tree.reduce(4,"argumentos",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // argumentos ::= tipoAtributo ID 
            { parser.Tree.reduce(2,"argumentos",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipoAtributo ::= BOOL 
            { parser.Tree.reduce(1,"tipoAtributo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoAtributo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoAtributo ::= INT 
            { parser.Tree.reduce(1,"tipoAtributo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoAtributo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoMetodo ::= BOOL 
            { parser.Tree.reduce(1,"tipoMetodo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoMetodo ::= INT 
            { parser.Tree.reduce(1,"tipoMetodo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipoMetodo ::= VOID 
            { parser.Tree.reduce(1,"tipoMetodo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracaoMetodo ::= tipoMetodo ID PARESQ argumentos PARDIR CHAVEESQ comandos CHAVEDIR 
            { parser.Tree.reduce(8,"declaracaoMetodo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoMetodo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comandos ::= comando PONTOEVIRGULA comandos 
            { parser.Tree.reduce(3,"comandos",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comandos ::= comando PONTOEVIRGULA 
            { parser.Tree.reduce(2,"comandos",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comando ::= ID IGUAL expressao 
            { parser.Tree.reduce(3,"comando",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comando ::= IF PARESQ expressao PARDIR comandos 
            { parser.Tree.reduce(5,"comando",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comando ::= IF PARESQ expressao PARDIR comandos ELSE comandos 
            { parser.Tree.reduce(7,"comando",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comando ::= RETORNO expressao 
            { parser.Tree.reduce(2,"comando",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operadorLogico ::= NOT 
            { parser.Tree.reduce(1,"operadorLogico",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operadorLogico ::= AND 
            { parser.Tree.reduce(1,"operadorLogico",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operadorLogico ::= OR 
            { parser.Tree.reduce(1,"operadorLogico",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operadorAritmetico ::= SOMA 
            { parser.Tree.reduce(1,"operadorAritmetico",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operadorAritmetico ::= MULTIPLICACAO 
            { parser.Tree.reduce(1,"operadorAritmetico",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadorRelacional ::= OPIGUAL 
            { parser.Tree.reduce(1,"operadorRelacional",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operadorRelacional ::= OPMAIOR 
            { parser.Tree.reduce(1,"operadorRelacional",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operadorRelacional ::= OPMENOR 
            { parser.Tree.reduce(1,"operadorRelacional",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expressao ::= termo 
            { parser.Tree.reduce(1,"expressao",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expressao ::= expressao operadorAritmetico termo 
            { parser.Tree.reduce(3,"expressao",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressao ::= expressao operadorRelacional termo 
            { parser.Tree.reduce(3,"expressao",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressao ::= expressao operadorLogico expressao 
            { parser.Tree.reduce(3,"expressao",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // termo ::= NUMERO 
            { parser.Tree.reduce(1,"termo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // termo ::= CONSTANTE 
            { parser.Tree.reduce(1,"termo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // termo ::= ID 
            { parser.Tree.reduce(1,"termo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // termo ::= PARESQ expressao PARDIR 
            { parser.Tree.reduce(3,"termo",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
